name: ci-build
run-name: ${{ github.actor }} is running ci-build
on:
  workflow_dispatch:
  push:
    tags:
      - v*

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
      attestations: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-latest]
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Setup variables (Linux & macOS)
        if: ${{ startsWith(matrix.os, 'ubuntu-') || startsWith(matrix.os, 'macos-') }}
        run: |
          echo "PYTHONHASHSEED=42" >> "$GITHUB_ENV"
          export SHORT_SHA=$(echo ${{ github.sha }} | cut -c -7)
          echo "SHORT_SHA=${SHORT_SHA}" >> "$GITHUB_ENV"
      - name: Setup variables (Windows)
        if: ${{ startsWith(matrix.os, 'windows-') }}
        run: |
          echo "PYTHONHASHSEED=42" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $env:SHORT_SHA = "${{ github.sha }}".Substring(0, 7)
          echo ("SHORT_SHA=" + $env:SHORT_SHA) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Install Linux build dependencies
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        run: |
          python -m pip install --upgrade pip
          pip install -r build_configs/linux/requirements.txt
      - name: Install macOS build dependencies
        if: ${{ startsWith(matrix.os, 'macos-') }}
        run: |
          python -m pip install --upgrade pip
          pip install -r build_configs/linux/requirements.txt
      - name: Install Windows build dependencies
        if: ${{ startsWith(matrix.os, 'windows-') }}
        run: |
          python -m pip install --upgrade pip
          pip install -r build_configs/windows/requirements.txt
      - name: Build with build.spec (Linux amd64)
        if: ${{ startsWith(matrix.os, 'ubuntu-') && !contains(matrix.os, 'arm') }}
        run: |
          export BUILD_FILE_NAME=ethstaker_deposit-cli-${SHORT_SHA}-linux-amd64
          echo "BUILD_FILE_NAME=${BUILD_FILE_NAME}" >> "$GITHUB_ENV"
          mkdir ${BUILD_FILE_NAME}
          pyinstaller --distpath ./${BUILD_FILE_NAME} ./build_configs/linux/build.spec
      - name: Build with build.spec (Linux arm64)
        if: ${{ startsWith(matrix.os, 'ubuntu-') && contains(matrix.os, 'arm') }}
        run: |
          export BUILD_FILE_NAME=ethstaker_deposit-cli-${SHORT_SHA}-linux-arm64
          echo "BUILD_FILE_NAME=${BUILD_FILE_NAME}" >> "$GITHUB_ENV"
          mkdir ${BUILD_FILE_NAME}
          pyinstaller --distpath ./${BUILD_FILE_NAME} ./build_configs/linux/build.spec
      - name: Build with build.spec (macOS amd64)
        if: ${{ matrix.os == 'macos-13' }}
        run: |
          export BUILD_FILE_NAME=ethstaker_deposit-cli-${SHORT_SHA}-darwin-amd64
          echo "BUILD_FILE_NAME=${BUILD_FILE_NAME}" >> "$GITHUB_ENV"
          mkdir ${BUILD_FILE_NAME}
          pyinstaller --distpath ./${BUILD_FILE_NAME} ./build_configs/macos/build.spec
      - name: Build with build.spec (macOS arm64)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          export BUILD_FILE_NAME=ethstaker_deposit-cli-${SHORT_SHA}-darwin-arm64
          echo "BUILD_FILE_NAME=${BUILD_FILE_NAME}" >> "$GITHUB_ENV"
          mkdir ${BUILD_FILE_NAME}
          pyinstaller --distpath ./${BUILD_FILE_NAME} ./build_configs/macos/build.spec
      - name: Build with build.spec (Windows amd64)
        if: ${{ startsWith(matrix.os, 'windows-') }}
        run: |
          $env:BUILD_FILE_NAME = ("ethstaker_deposit-cli-" + $env:SHORT_SHA + "-windows-amd64")
          echo ("BUILD_FILE_NAME=" + $env:BUILD_FILE_NAME) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          mkdir $env:BUILD_FILE_NAME
          $env:BUILD_FILE_NAME_PATH = (".\" + $env:BUILD_FILE_NAME)
          echo ("BUILD_FILE_NAME_PATH=" + $env:BUILD_FILE_NAME_PATH) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          pyinstaller --distpath $env:BUILD_FILE_NAME .\build_configs\windows\build.spec
      - name: Install coreutils (macOS)
        if: ${{ startsWith(matrix.os, 'macos-') }}
        run: |
          brew install coreutils
      - name: Create archive and checksum (Linux & macOS)
        if: ${{ startsWith(matrix.os, 'ubuntu-') || startsWith(matrix.os, 'macos-') }}
        run: |
          export ARCHIVE_FILE_NAME=${BUILD_FILE_NAME}.tar.gz
          echo "ARCHIVE_FILE_NAME=${ARCHIVE_FILE_NAME}" >> "$GITHUB_ENV"
          tar -zcvf ${ARCHIVE_FILE_NAME} ./${BUILD_FILE_NAME}
          mkdir -p output/artifacts
          cp ${ARCHIVE_FILE_NAME} output/artifacts
          sha256sum ${ARCHIVE_FILE_NAME} | head -c 64 > output/artifacts/${ARCHIVE_FILE_NAME}.sha256
      - name: Create archive and checksum (Windows)
        if: ${{ startsWith(matrix.os, 'windows-') }}
        run: |
          $env:ZIP_FILE_NAME = ($env:BUILD_FILE_NAME + ".zip")
          echo ("ZIP_FILE_NAME=" + $env:ZIP_FILE_NAME) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Compress-Archive -Path $env:BUILD_FILE_NAME_PATH -DestinationPath $env:ZIP_FILE_NAME
          mkdir output\artifacts
          copy $env:ZIP_FILE_NAME output\artifacts
          $env:CHECKSUM_FILE_NAME_PATH = ("output\artifacts\" + $env:ZIP_FILE_NAME + ".sha256")
          certUtil -hashfile $env:ZIP_FILE_NAME SHA256 | findstr /i /v "SHA256" | findstr /i /v "CertUtil" > $env:CHECKSUM_FILE_NAME_PATH
      - name: Generate artifacts attestation (Linux & macOS)
        if: ${{ startsWith(matrix.os, 'ubuntu-') || startsWith(matrix.os, 'macos-') }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: output/artifacts/*
      - name: Generate artifacts attestation (Windows)
        if: ${{ startsWith(matrix.os, 'windows-') }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: output\artifacts\*
      - name: Archive production artifacts (Linux & macOS)
        if: ${{ startsWith(matrix.os, 'ubuntu-') || startsWith(matrix.os, 'macos-') }}
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ github.sha }}-${{ github.run_id }}
          path: output/artifacts
      - name: Archive production artifacts (Windows)
        if: ${{ startsWith(matrix.os, 'windows-') }}
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ github.sha }}-${{ github.run_id }}
          path: output\artifacts
  build-and-push-docker:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      # 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
  create-release:
    needs: [build-binaries, build-and-push-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build binaries
        uses: actions/download-artifact@v4
        with:
          path: assets/
          pattern: binary-*
      - name: Create draft release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var path = require('path');

            var tagName = '';
            if (context.eventName == 'push') {
              tagName = context.ref;
            } else if (context.eventName == 'workflow_dispatch') {
              tagName = `dev-${context.actor}-${context.sha.substring(0, 7)}-${context.runId}`;
            } else {
              core.setFailed(`Unhandled triggering event.`);
            }

            console.log('Creating draft release...')

            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              target_commitish: context.sha,
              draft: true,
              generate_release_notes: true,
            });

            console.log(release);

            const archivesGlobber = await glob.create('assets/*/*')
            for await (const file of archivesGlobber.globGenerator()) {
              console.log(`Uploading ${file} to the release ${release.id}`);

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                name: path.basename(file),
                data: `@${file}`,
              });
            }

            